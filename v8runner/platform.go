package v8runner

import (
	"strings"
	"fmt"
	"runtime"
	"path"
	"os/exec"
	log "github.com/sirupsen/logrus"
	"os"
	"./v8config-file"
)

const ВерсияПоУмолчанию string = "8.3"

type ВерсияПлатформы struct {
	Версия string
	Rac    string
	V8     string
}

func НоваяВерсияПлатформы(v string, rac string, v8 string) *ВерсияПлатформы {
	return &ВерсияПлатформы{
		v,
		rac,
		v8,
	}
}

var ДоступныеВерсииПлатформы = make(map[string]*ВерсияПлатформы)

func init() {
	ПолучитьПутьКВерсииПлатформы(ВерсияПоУмолчанию)
}
func добавитьВерсию(v *ВерсияПлатформы) {
	ДоступныеВерсииПлатформы[v.Версия] = v
}

func ПолучитьВерсиюПоУмолчанию() (v *ВерсияПлатформы) {
	v = ДоступныеВерсииПлатформы[ВерсияПоУмолчанию]
	return
}

//noinspection ALL
func ПолучитьПутьКВерсииПлатформы(ВерсияПлатформы string) {

	if !strings.HasPrefix(ВерсияПлатформы, "8.") {
		panic(fmt.Sprintf("Неверная версия платформы < %s >", ВерсияПлатформы))
	}
	//noinspection ALL
	var ЭтоWindows bool = runtime.GOOS == "windows"

	if ЭтоWindows {
		МассивПутей := СобратьВозможныеКаталогиУстановкиПлатформыWindows()
		log.Debugf("Массив найденных путей установки 1С: %s", МассивПутей)
	} else
	{

		var КорневойПуть1С = path.Join("/opt", "1C", "v8.3")
		var КаталогУстановкиi386 = path.Join(КорневойПуть1С, "i386")
		var КаталогУстановкиx86_64 = path.Join(КорневойПуть1С, "x86_64")
		var КаталогУстановки string = ""

		if ok, _ := Exists(КаталогУстановкиi386); ok {
			КаталогУстановки = КаталогУстановкиi386
		} else {
			if ok, _ := Exists(КаталогУстановкиx86_64); ok {
				КаталогУстановки = КаталогУстановкиx86_64
			}
		}

		if ПустаяСтрока(КаталогУстановки) {
			log.Debugf("Не удалось прочитать версию 1С < %s >. Не найден каталог установки 1С", ВерсияПлатформы)
		}

		var fRac = path.Join(КаталогУстановки, "rac")
		if ok, err := Exists(fRac); ok {
			var args []string

			out, execErr := exec.Command(fRac, strings.Join(args, "-v")).Output()
			if execErr != nil {
				log.Debugf("Не удалось прочитать версию 1С < %s > по причине %s", ВерсияПлатформы, err)

			}
			log.Debugf("Вывод команды rac -v: %s", out)

		} else {
			log.Debugf("Не удалось прочитать версию 1С < %s > по причине: %s ", ВерсияПлатформы, err)
		}

		var fV8 = path.Join(КаталогУстановки, "1cv8")
		if ok, err := Exists(fV8); ok {
			добавитьВерсию(НоваяВерсияПлатформы(ВерсияПлатформы, fRac, fV8))
		} else {
			log.Debugf("Не удалось прочитать версию 1С < %s > по причине %s", ВерсияПлатформы, err)
		}

	}

}

//noinspection ALL
func СобратьВозможныеКаталогиУстановкиПлатформыWindows() []string {

	var МассивПутей = []string{}

	var СуффиксРасположения = path.Join("1C", "1CEStart", "1CEStart.cfg")

	var envs = []string{
		"ALLUSERSPROFILE",
		"APPDATA",
	}

	for _, env := range envs {
		if cat, ok := os.LookupEnv(env); ok {
			ДополнитьМассивРасположенийИзКонфигурационногоФайла(path.Join(cat, СуффиксРасположения), &МассивПутей)
		}
	}

	return МассивПутей

}

func ДополнитьМассивРасположенийИзКонфигурационногоФайла(ИмяФайла string, МассивПутей *[]string) {

	var Значения = КонфигурацияСтартера.ПолучитьСписок("InstalledLocation")

	log.Debugf("Начальное состояние МассивПутей: %s", *МассивПутей)
	for _, item := range Значения {
		*МассивПутей = append(*МассивПутей, item)
		log.Debugf("Добавлен элемент %s к массиву", item)
	}
	log.Debugf("Конечное состояние МассивПутей: %s", *МассивПутей)

}

//Если ЭтоWindows = Истина Тогда
//
//СписокСтрок = РазложитьСтрокуВМассивПодстрок(ВерсияПлатформы, ".");
//Если СписокСтрок.Количество() < 2 Тогда
//ВызватьИсключение "Маска версии платформы должна содержать, как минимум, минорную и мажорную версию, т.е. Maj.Min[.Release][.Build]";
//КонецЕсли;
//
//КаталогиУстановкиПлатформы = СобратьВозможныеКаталогиУстановкиПлатформыWindows();
//
//Если КаталогиУстановкиПлатформы.Количество() = 0 Тогда
//Лог.Отладка("В конфигах стартера не найдены пути установки. Пробую стандартные пути наугад.");
//файлProgramFiles = Новый Файл("C:\Program Files (x86)\");
//Если Не файлProgramFiles.Существует() Тогда
//файлProgramFiles = Новый Файл("C:\Program Files\");
//Если Не файлProgramFiles.Существует() Тогда
//ВызватьИсключение "Не обнаружено установленных версий платформы 1С";
//КонецЕсли;
//КонецЕсли;
//
//КаталогиУстановкиПлатформы.Добавить(ОбъединитьПути(файлProgramFiles.ПолноеИмя, "1Cv8"));
//КаталогиУстановкиПлатформы.Добавить(ОбъединитьПути(файлProgramFiles.ПолноеИмя, "1Cv82"));
//
//КонецЕсли;
//
//МассивКаталогов1С = Новый Массив;
//Для Каждого ВозможныйПуть Из КаталогиУстановкиПлатформы Цикл
//
//Лог.Отладка("Выполняю попытку поиска версии в каталоге " + ВозможныйПуть);
//
//МассивФайлов = НайтиФайлы(ВозможныйПуть, ВерсияПлатформы+"*");
//Если МассивФайлов.Количество() = 0 Тогда
//Лог.Отладка("Не найдено ни одного каталога с версией в %1", ВозможныйПуть);
//Продолжить;
//КонецЕсли;
//Если МассивКаталогов1С = Неопределено Тогда
//МассивКаталогов1С = МассивФайлов;
//Иначе
//Для каждого Подкаталог1С Из МассивФайлов Цикл
//Файл1cv8 = Новый Файл(ОбъединитьПути(Подкаталог1С.ПолноеИмя, "bin", "1cv8.exe"));
//Если Файл1cv8.Существует() Тогда
//ОписаниеКаталога = Новый Структура("Версия, ФайлКлиента1С", Подкаталог1С.Имя, Файл1cv8);
//МассивКаталогов1С.Добавить(ОписаниеКаталога);
//Лог.Отладка("Нашел платформу 1С %1", Подкаталог1С.Имя);
//Иначе
//Лог.Отладка("Пропускаю каталог 1С %1", Подкаталог1С.Имя);
//КонецЕсли;
//КонецЦикла;
//КонецЕсли;
//КонецЦикла;
//
//НужныйФайлПлатформы = Неопределено;
//
//МассивКаталоговВерсий = Новый Массив;
//Для Каждого ОписаниеКаталога Из МассивКаталогов1С Цикл
//правыйСимвол = Прав(ОписаниеКаталога.Версия, 1);
//Если правыйСимвол < "0" или правыйСимвол > "9" Тогда
//Продолжить;
//КонецЕсли;
//МассивКаталоговВерсий.Добавить(ОписаниеКаталога);
//КонецЦикла;
//
//Если МассивКаталоговВерсий.Количество() > 0 Тогда
//ОписаниеМаксВерсии = МассивКаталоговВерсий[0];
//Для Сч = 1 По МассивКаталоговВерсий.ВГраница() Цикл
//Если СтроковыеФункции.СравнитьВерсии(МассивКаталоговВерсий[Сч].Версия, ОписаниеМаксВерсии.Версия) > 0 Тогда
//ОписаниеМаксВерсии = МассивКаталоговВерсий[Сч];
//КонецЕсли;
//КонецЦикла;
//НужныйФайлПлатформы = ОписаниеМаксВерсии.ФайлКлиента1С;
//мВерсияПлатформы = ОписаниеМаксВерсии.Версия;
//Лог.Отладка("Версия найдена: " + НужныйФайлПлатформы.ПолноеИмя);
//
//КонецЕсли;
//
//Если НужныйФайлПлатформы = Неопределено Тогда
//ВызватьИсключение "Не найден путь к платформе 1С <"+ВерсияПлатформы+">";
//КонецЕсли;
//
//Иначе
//// help wanted: на Линукс конфиг стартера лежит в ~/.1C/1cestart.
//КорневойПуть1С = ОбъединитьПути("/opt", "1C", "v8.3");
//КаталогУстановки = Новый Файл(ОбъединитьПути(КорневойПуть1С, "i386"));
//Если НЕ КаталогУстановки.Существует() Тогда
//КаталогУстановки = Новый Файл(ОбъединитьПути(КорневойПуть1С, "x86_64"));
//КонецЕсли;
////Определим версию приложения
//ФайлРАК = Новый Файл(ОбъединитьПути(КаталогУстановки.ПолноеИмя, "rac"));
//Если ФайлРАК.Существует() Тогда
//Команда = Новый Команда;
//СтрокаЗапуска = ФайлРАК.ПолноеИмя + " -v ";
//Команда.УстановитьСтрокуЗапуска(СтрокаЗапуска);
//Команда.УстановитьПравильныйКодВозврата(0);
//Попытка
//Команда.Исполнить();
//мВерсияПлатформы = СокрЛП(Команда.ПолучитьВывод());
//Исключение
//Лог.Предупреждение("Не удалось прочитать версию 1С %1, %2.
//|" + ОписаниеОшибки(), ВерсияПлатформы, СтрокаЗапуска);
//КонецПопытки;
//КонецЕсли;
//НужныйФайлПлатформы = Новый Файл(ОбъединитьПути(КаталогУстановки.ПолноеИмя, "1cv8"));
//КонецЕсли;
//
//Если Не НужныйФайлПлатформы.Существует() Тогда
//ВызватьИсключение "Ошибка определения версии платформы. Файл <"+НужныйФайлПлатформы.ПолноеИмя+"> не существует";
//КонецЕсли;
//
//Возврат НужныйФайлПлатформы.ПолноеИмя;
//
//КонецФункции
