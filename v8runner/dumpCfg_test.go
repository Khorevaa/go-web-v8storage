package v8runner

import (
	"testing"
	"github.com/stretchr/testify/suite"
	"./dumpMode"
	"path"
	log "github.com/sirupsen/logrus"
)



type тестыНаВыгрузкуКонфигурацииВФайл struct {
	suite.Suite
	conf                            *Конфигуратор
	КаталогВыгрузки 				string
	ПутьКФайлуКофигурации           string
	ФорматВыгрузки                  string
	ОбновитьФайлИнформацииОВыгрузке bool
}

type тестыНаВыгрузкуКонфигурацииВФайлы struct {
	suite.Suite
	conf                            *Конфигуратор
	КаталогВыгрузки                 string
	ПутьКФайлуКофигурации           string
	ФорматВыгрузки                  string
	ОбновитьФайлИнформацииОВыгрузке bool


}

func Test_ТестыНаВыгрузкуКонфигурацииВФайл(t *testing.T) {

	suiteTester := new(тестыНаВыгрузкуКонфигурацииВФайл)
	suite.Run(t, suiteTester)

}

func Test_ТестыНаВыгрузкуКонфигурацииВФайлы(t *testing.T) {

	suiteTester := new(тестыНаВыгрузкуКонфигурацииВФайлы)
	suite.Run(t, suiteTester)

}

func (s *тестыНаВыгрузкуКонфигурацииВФайл) TearDownSuite() {
	ОчиститьВременныйКаталог()
}

func (s *тестыНаВыгрузкуКонфигурацииВФайлы) TearDownSuite() {
	ОчиститьВременныйКаталог()
}
func (s *тестыНаВыгрузкуКонфигурацииВФайл) SetupSuite() {

	log.SetLevel(log.DebugLevel)

	s.ПутьКФайлуКофигурации = path.Join(pwd, "fixtures/ТестовыйФайлКонфигурации.cf")
	s.conf = НовыйКонфигуратор()
	errLoad := s.conf.ЗагрузитьКонфигурациюИзФайла(s.ПутьКФайлуКофигурации)
	s.NoErrorf(errLoad, "Ошибка загрузки конфигурации из файла: %s", s.ПутьКФайлуКофигурации)

}

func (s *тестыНаВыгрузкуКонфигурацииВФайлы) SetupSuite() {

	log.SetLevel(log.DebugLevel)

	s.ПутьКФайлуКофигурации = path.Join(pwd, "fixtures/ТестовыйФайлКонфигурации.cf")
	s.conf = НовыйКонфигуратор()
	errLoad := s.conf.ЗагрузитьКонфигурациюИзФайла(s.ПутьКФайлуКофигурации)
	s.NoErrorf(errLoad, "Ошибка загрузки конфигурации из файла: %s", s.ПутьКФайлуКофигурации)
}

func (s *тестыНаВыгрузкуКонфигурацииВФайлы) SetupTest() {

	s.КаталогВыгрузки = ВременныйКаталог()

}

func (s *тестыНаВыгрузкуКонфигурацииВФайл) SetupTest() {

	s.КаталогВыгрузки = ВременныйКаталог()

}

func (s *тестыНаВыгрузкуКонфигурацииВФайлы) TestКонфигуратор_ВыгрузитьКонфигурациюСРежимомВыгрузки_Иерархический() {


	err := s.conf.ВыгрузитьКонфигурациюСРежимомВыгрузки(s.КаталогВыгрузки, РежимВыгрузкиКонфигурации.Иерархический)
	s.NoError(err, "TestКонфигуратор_ВыгрузитьКонфигурациюСРежимомВыгрузки: %v", err)

	xmlFile := path.Join(s.КаталогВыгрузки, configuratuonXml)
	_, err = Exists(xmlFile)

	s.NoErrorf(err, "Файл с выгруженной конфигурацией не найдет: %s", xmlFile )


}

func (s *тестыНаВыгрузкуКонфигурацииВФайлы) TestКонфигуратор_ВыгрузитьКонфигурациюСРежимомВыгрузки_Плоский() {


	err := s.conf.ВыгрузитьКонфигурациюСРежимомВыгрузки(s.КаталогВыгрузки, РежимВыгрузкиКонфигурации.Плоский)
	s.NoError(err, "TestКонфигуратор_ВыгрузитьКонфигурациюСРежимомВыгрузки: %v", err)

	xmlFile := path.Join(s.КаталогВыгрузки, configuratuonXml)
	_, err = Exists(xmlFile)

	s.NoErrorf(err, "Файл с выгруженной конфигурацией не найдет: %s", xmlFile )

	}

func (s *тестыНаВыгрузкуКонфигурацииВФайлы) TestКонфигуратор_ВыгрузитьКонфигурациюПоУмолчанию() {

	err := s.conf.ВыгрузитьКонфигурациюПоУмолчанию(s.КаталогВыгрузки)
	s.NoError(err, "TestКонфигуратор_ВыгрузитьКонфигурациюПоУмолчанию: %v", err)

	xmlFile := path.Join(s.КаталогВыгрузки, configuratuonXml)
	_, err = Exists(xmlFile)

	s.NoErrorf(err, "Файл с выгруженной конфигурацией не найдет: %s", xmlFile )

}

func (s *тестыНаВыгрузкуКонфигурацииВФайлы) TestКонфигуратор_ВыгрузитьКонфигурацию() {

	err := s.conf.ВыгрузитьКонфигурацию(s.КаталогВыгрузки, РежимВыгрузкиКонфигурации.СтандартныйРежим(),false, "", "")
	s.NoError(err, "TestКонфигуратор_ВыгрузитьКонфигурацию: %v", err)

	xmlFile := path.Join(s.КаталогВыгрузки, configuratuonXml)
	_, err = Exists(xmlFile)

	s.NoErrorf(err, "Файл с выгруженной конфигурацией не найдет: %s", xmlFile )

}

func (s *тестыНаВыгрузкуКонфигурацииВФайлы) TestКонфигуратор_ВыгрузитьИзмененияКонфигурацииВФайл() {
	//		if err := conf.ВыгрузитьИзмененияКонфигурацииВФайл(tt.args.КаталогВыгрузки, tt.args.ФорматВыгрузки, tt.args.ПутьКФайлуИзменений, tt.args.ПутьКФайлуВерсийДляСравнения); (err != nil) != tt.wantErr {
}

func (s *тестыНаВыгрузкуКонфигурацииВФайлы) TestКонфигуратор_dumpConfigToFiles() {

	//		if err := conf.dumpConfigToFiles(tt.args.dir, tt.args.mode, tt.args.ch, tt.args.pChFile, tt.args.pVersionFile); (err != nil) != tt.wantErr {

}

